{"version":3,"sources":["app/routes/mail/basic/index.js"],"names":["Mail","MailSideBar","className","id","style","height","props","width","variant","color","onClick","setState","composeMail","getNavFolders","getNavFilters","getNavLabels","onDeleteMail","mails","state","allMail","map","mail","selected","folder","selectedFolder","alertMessage","showMessage","selectedMails","folderMails","filter","folders","index","key","filterMails","noContentFoundMessage","currentMail","loader","setTimeout","icon","title","onFolderMenuItemSelect","folderId","handleRequestClose","onLabelMenuItemSelect","label","labels","includes","removeLabel","addLabel","folderMenuState","labelMenuState","optionMenuState","filters","starred","important","onFolderSelect","event","anchorEl","currentTarget","onLabelSelect","onOptionMenuSelect","onOptionMenuItemSelect","option","getAllMail","getUnselectedAllMail","getReadMail","getUnreadMail","getStarredMail","getUnStarredMail","getImportantMail","getUnimportantMail","length","optionName","selectedMail","read","searchMail","searchText","deleted","searchMails","subject","toLowerCase","indexOf","displayMail","onStartSelect","bind","onMailSelect","onMailChecked","onImportantSelect","getMailActions","drawerState","user","name","email","avatar","data","this","splice","concat","evt","target","value","open","onClose","onToggleDrawer","aria-label","placeholder","onChange","updateSearch","indeterminate","checked","onAllMailSelect","MenuListProps","options","onMailSend","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","Component","connect","settings"],"mappings":"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","file":"static/js/163.98ce9695.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {connect} from 'react-redux';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport mails from '../data/mails';\r\nimport folders from '../data/folders';\r\nimport filters from '../data/filters';\r\nimport labels from '../data/labels';\r\nimport options from '../data/options';\r\nimport MailList from 'components/mail/MailList';\r\n\r\nimport ComposeMail from 'components/mail/Compose/index';\r\nimport AppModuleHeader from 'components/AppModuleHeader/index';\r\nimport MailDetail from 'components/mail/MailDetail/index';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport CustomScrollbars from 'util/CustomScrollbars';\r\n\r\n\r\nclass Mail extends Component {\r\n\r\n  MailSideBar = () => {\r\n    return <div className=\"module-side\">\r\n\r\n      <div className=\"module-side-header\">\r\n        <div className=\"module-logo\">\r\n          <i className=\"zmdi zmdi-email mr-3\"/>\r\n          <span><IntlMessages id=\"mail.mailbox\"/></span>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div className=\"module-side-content\">\r\n        <CustomScrollbars className=\"module-side-scroll scrollbar\"\r\n                          style={{height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'}}>\r\n          <div className=\"module-add-task\">\r\n            <Button variant=\"contained\" color=\"primary\" className=\"btn-block\"\r\n                    onClick={() => {\r\n                      this.setState({composeMail: true})\r\n                    }}>\r\n              <i className=\"zmdi zmdi-edit zmdi-hc-fw\"/>\r\n              <IntlMessages id=\"mail.compose\"/> </Button>\r\n          </div>\r\n\r\n          <ul className=\"module-nav\">\r\n\r\n            {this.getNavFolders()}\r\n\r\n            <li className=\"module-nav-label\">\r\n              <IntlMessages id=\"mail.filters\"/>\r\n            </li>\r\n\r\n            {this.getNavFilters()}\r\n\r\n            <li className=\"module-nav-label\">\r\n              <IntlMessages id=\"mail.labels\"/>\r\n            </li>\r\n\r\n            {this.getNavLabels()}\r\n\r\n          </ul>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n  };\r\n\r\n  onDeleteMail = () => {\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: 4, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      alertMessage: 'Mail Deleted Successfully',\r\n      showMessage: true,\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getNavFolders = () => {\r\n    return folders.map((folder, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\r\n        this.setState({\r\n          selectedFolder: folder.id,\r\n          noContentFoundMessage: 'No mail found in selected folder',\r\n          currentMail: null,\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className={`jr-link ${this.state.selectedFolder === folder.id ? 'active' : ''}`}>\r\n          <i className={`zmdi zmdi-${folder.icon}`}/>\r\n          <span>{folder.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  onFolderMenuItemSelect = (folderId) => {\r\n    this.handleRequestClose();\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: folderId, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      noContentFoundMessage: 'No mail found in selected folder',\r\n      alertMessage: 'Mail has been moved successfully',\r\n      showMessage: true,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  onLabelMenuItemSelect = (label) => {\r\n    this.handleRequestClose();\r\n    const mails = this.state.allMail.map(mail => {\r\n        if (mail.selected && (mail.folder === this.state.selectedFolder)) {\r\n          if (mail.labels.includes(label.id)) {\r\n            return {...mail, labels: this.removeLabel(mail, label.id)};\r\n          } else {\r\n            return {...mail, labels: this.addLabel(mail, label.id)};\r\n          }\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      noContentFoundMessage: 'No mail found in selected label',\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      composeMail: false,\r\n      showMessage: false,\r\n      folderMenuState: false,\r\n      labelMenuState: false,\r\n      optionMenuState: false\r\n    });\r\n  };\r\n  getNavFilters = () => {\r\n    return filters.map((filter, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => {\r\n          if (filter.id === 0 && mail.starred) {\r\n            return mail\r\n          } else if (filter.id === 1 && mail.important) {\r\n            return mail\r\n          }\r\n          return null;\r\n        });\r\n        this.setState({\r\n          noContentFoundMessage: 'No mail found in selected filter',\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"jr-link\">\r\n          <i className={`zmdi zmdi-${filter.icon}`}/>\r\n          <span>{filter.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  onFolderSelect = event => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n      folderMenuState: !this.state.folderMenuState\r\n    })\r\n  };\r\n  onLabelSelect = event => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n      labelMenuState: !this.state.labelMenuState\r\n    })\r\n  };\r\n  onOptionMenuSelect = event => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n      optionMenuState: !this.state.optionMenuState\r\n    })\r\n  };\r\n  onOptionMenuItemSelect = (option) => {\r\n    switch (option.title) {\r\n      case 'All':\r\n        this.handleRequestClose();\r\n        this.getAllMail();\r\n        break;\r\n      case 'None':\r\n        this.handleRequestClose();\r\n        this.getUnselectedAllMail();\r\n        break;\r\n      case 'Read':\r\n        this.handleRequestClose();\r\n        this.getReadMail();\r\n        break;\r\n      case 'Unread':\r\n        this.handleRequestClose();\r\n        this.getUnreadMail();\r\n        break;\r\n      case 'Starred':\r\n        this.handleRequestClose();\r\n        this.getStarredMail();\r\n        break;\r\n      case 'Unstarred':\r\n        this.handleRequestClose();\r\n        this.getUnStarredMail();\r\n        break;\r\n      case 'Important':\r\n        this.handleRequestClose();\r\n        this.getImportantMail();\r\n        break;\r\n      case 'Unimportant':\r\n        this.handleRequestClose();\r\n        this.getUnimportantMail();\r\n        break;\r\n      default:\r\n        this.handleRequestClose();\r\n        this.getAllMail();\r\n    }\r\n  };\r\n  getAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: true\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: mails.length,\r\n      allMail: mails,\r\n      optionName: 'All',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getUnselectedAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: false\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      optionName: 'None',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getReadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      allMail: mails,\r\n      optionName: 'Read',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnreadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      allMail: mails,\r\n      optionName: 'Unread',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      allMail: mails,\r\n      optionName: 'Starred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      allMail: mails,\r\n      optionName: 'UnStarred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getImportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      allMail: mails,\r\n      optionName: 'Important',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnimportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unimportant',\r\n      allMail: mails,\r\n      noContentFoundMessage: 'No Mail found in selected Label',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getNavLabels = () => {\r\n    return labels.map((label, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id));\r\n        this.setState({\r\n          loader: true,\r\n          noContentFoundMessage: 'No mail found in selected label',\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"jr-link\">\r\n          <i className={`zmdi zmdi-circle text-${label.color}`}/>\r\n          <span>{label.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  searchMail = (searchText) => {\r\n    if (searchText === '') {\r\n      this.setState({folderMails: this.state.allMail.filter((mail) => !mail.deleted)});\r\n    } else {\r\n      const searchMails = this.state.allMail.filter((mail) =>\r\n        !mail.deleted && mail.subject.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n      this.setState({\r\n        folderMails: searchMails\r\n      });\r\n    }\r\n  };\r\n  displayMail = (currentMail, folderMails, noContentFoundMessage) => {\r\n    return (<div className=\"module-box-column\">\r\n      {currentMail === null ?\r\n        folderMails.length === 0 ?\r\n          <div className=\"d-flex align-items-center justify-content-center\"\r\n               style={{height: this.props.width >= 1200 ? 'calc(100vh - 259px)' : 'calc(100vh - 238px)'}}>\r\n            {noContentFoundMessage}\r\n          </div>\r\n          :\r\n          <MailList mails={folderMails} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onMailSelect={this.onMailSelect.bind(this)}\r\n                    width={this.props.width}\r\n                    onMailChecked={this.onMailChecked.bind(this)}/>\r\n        :\r\n        <MailDetail mail={currentMail} onStartSelect={this.onStartSelect.bind(this)}\r\n                    width={this.props.width}\r\n                    onImportantSelect={this.onImportantSelect.bind(this)}/>}\r\n    </div>)\r\n  };\r\n  getMailActions = () => {\r\n    return <div>\r\n      <IconButton onClick={this.onFolderSelect.bind(this)} className=\"icon-btn\">\r\n        <i className=\"zmdi zmdi-folder\"/>\r\n      </IconButton>\r\n\r\n      <IconButton onClick={this.onDeleteMail.bind(this)} className=\"icon-btn\">\r\n        <i className=\"zmdi zmdi-delete\"/>\r\n      </IconButton>\r\n\r\n      <IconButton\r\n        onClick={this.onLabelSelect.bind(this)} className=\"icon-btn\">\r\n        <i className=\"zmdi zmdi-label-alt\"/>\r\n      </IconButton>\r\n    </div>\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchMail: '',\r\n      noContentFoundMessage: 'No mail found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      drawerState: false,\r\n      optionName: 'None',\r\n      anchorEl: null,\r\n      allMail: mails,\r\n      loader: true,\r\n      currentMail: null,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert@example.com',\r\n        avatar: \"https://via.placeholder.com/150x150\"\r\n      },\r\n      selectedMails: 0,\r\n      selectedFolder: 0,\r\n      composeMail: false,\r\n      labelMenuState: false,\r\n      folderMenuState: false,\r\n      optionMenuState: false,\r\n      folderMails: mails.filter(mail => mail.folder === 0)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  onMailChecked(data) {\r\n    data.selected = !data.selected;\r\n    let selectedMail = 0;\r\n    const mails = this.state.folderMails.map(mail => {\r\n        if (mail.selected) {\r\n          selectedMail++;\r\n        }\r\n        if (mail.id === data.id) {\r\n          if (mail.selected) {\r\n            selectedMail++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      folderMails: mails\r\n    });\r\n  }\r\n\r\n  onAllMailSelect() {\r\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\r\n    if (selectAll) {\r\n      this.getAllMail();\r\n    } else {\r\n      this.getUnselectedAllMail();\r\n    }\r\n  }\r\n\r\n  removeLabel(mail, label) {\r\n    mail.labels.splice(mail.labels.indexOf(label), 1);\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels}\r\n      })\r\n    }\r\n    return mail.labels;\r\n  }\r\n\r\n  onStartSelect(data) {\r\n    data.starred = !data.starred;\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onImportantSelect(data) {\r\n    data.important = !data.important;\r\n    this.setState({\r\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onMailSend(data) {\r\n    this.setState(\r\n      {\r\n        alertMessage: 'Mail Sent Successfully',\r\n        showMessage: true,\r\n        folderMails: this.state.allMail.concat(data),\r\n        allMail: this.state.allMail.concat(data)\r\n      }\r\n    );\r\n  }\r\n\r\n  onMailSelect(mail) {\r\n    this.setState({\r\n      loader: true,\r\n      currentMail: mail,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  addLabel(mail, label) {\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels.concat(label)}\r\n      })\r\n    }\r\n    return mail.labels.concat(label)\r\n  }\r\n\r\n  updateSearch(evt) {\r\n    this.setState({\r\n      searchMail: evt.target.value,\r\n    });\r\n    this.searchMail(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {selectedMails, loader, currentMail, folderMails, composeMail, user, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n\r\n      <div className=\"app-wrapper\">\r\n        <div className=\"animated slideInUpTiny animation-duration-3\">\r\n          <div className=\"app-module\">\r\n\r\n            <div className=\"d-block d-xl-none\">\r\n              <Drawer\r\n                open={this.state.drawerState}\r\n                onClose={this.onToggleDrawer.bind(this)}>\r\n                {this.MailSideBar()}\r\n              </Drawer>\r\n            </div>\r\n            <div className=\"app-module-sidenav d-none d-xl-flex\">\r\n              {this.MailSideBar()}\r\n            </div>\r\n\r\n            <div className=\"module-box\">\r\n\r\n              <div className=\"module-box-header\">\r\n\r\n                <IconButton className=\"drawer-btn d-block d-xl-none\" aria-label=\"Menu\"\r\n                            onClick={this.onToggleDrawer.bind(this)}>\r\n                  <i className=\"zmdi zmdi-menu\"/>\r\n                </IconButton>\r\n                <AppModuleHeader placeholder=\"Search mails\" user={this.state.user}\r\n                                 onChange={this.updateSearch.bind(this)}\r\n                                 value={this.state.searchMail}/>\r\n\r\n              </div>\r\n\r\n              <div className=\"module-box-content\">\r\n                <div className=\"module-box-topbar\">\r\n                  {this.state.currentMail === null ?\r\n                    <div className=\"d-flex\">\r\n                      <Checkbox color=\"primary\"\r\n                                indeterminate={selectedMails > 0 && selectedMails < folderMails.length}\r\n                                checked={selectedMails > 0}\r\n                                onChange={this.onAllMailSelect.bind(this)}\r\n                                value=\"SelectMail\"/>\r\n                      <div className=\"d-flex align-items-center\" onClick={this.onOptionMenuSelect.bind(this)}>\r\n                        <span className=\"px-2\"> {this.state.optionName}</span>\r\n                        <IconButton className=\"icon-btn-sm\">\r\n                          <i className=\"zmdi zmdi-caret-down\"/>\r\n                        </IconButton>\r\n                      </div>\r\n                    </div>\r\n                    :\r\n                    <IconButton className=\"icon-btn\"\r\n                                onClick={() => {\r\n                                  this.setState({\r\n                                    currentMail: null\r\n                                  })\r\n                                }}>\r\n                      <i className=\"zmdi zmdi-arrow-back\"/>\r\n                    </IconButton>\r\n                  }\r\n\r\n                  {(selectedMails > 0) && this.getMailActions()}\r\n\r\n\r\n                  <Menu id=\"option-menu\"\r\n                        anchorEl={this.state.anchorEl}\r\n                        open={this.state.optionMenuState}\r\n                        onClose={this.handleRequestClose}\r\n                        MenuListProps={{\r\n                          style: {\r\n                            width: 150,\r\n                          },\r\n                        }}>\r\n                    {options.map(option =>\r\n                      <MenuItem key={option.title}\r\n                                onClick={this.onOptionMenuItemSelect.bind(this, option)}>\r\n                        {option.title}\r\n                      </MenuItem>,\r\n                    )}\r\n                  </Menu>\r\n\r\n                  <Menu id=\"folder-menu\"\r\n                        anchorEl={this.state.anchorEl}\r\n                        open={this.state.folderMenuState}\r\n                        onClose={this.handleRequestClose}\r\n                        MenuListProps={{\r\n                          style: {\r\n                            width: 150,\r\n                          },\r\n                        }}>\r\n                    {folders.map(folder =>\r\n                      <MenuItem key={folder.id}\r\n                                onClick={this.onFolderMenuItemSelect.bind(this, folder.id)}>\r\n                        {folder.title}\r\n                      </MenuItem>,\r\n                    )}\r\n                  </Menu>\r\n                  <Menu id=\"label-menu\"\r\n                        anchorEl={this.state.anchorEl}\r\n                        open={this.state.labelMenuState}\r\n                        onClose={this.handleRequestClose}\r\n                        MenuListProps={{\r\n                          style: {\r\n                            width: 150,\r\n                          },\r\n                        }}>\r\n                    {labels.map(label =>\r\n                      <MenuItem key={label.id}\r\n                                onClick={this.onLabelMenuItemSelect.bind(this, label)}>\r\n                        {label.title}\r\n                      </MenuItem>,\r\n                    )}\r\n                  </Menu>\r\n                </div>\r\n\r\n                {loader ?\r\n                  <div className=\"loader-view\"\r\n                       style={{height: this.props.width >= 1200 ? 'calc(100vh - 259px)' : 'calc(100vh - 238px)'}}>\r\n                    <CircularProgress/>\r\n                  </div> : this.displayMail(currentMail, folderMails, noContentFoundMessage)}\r\n\r\n                <ComposeMail open={composeMail} user={user}\r\n                             onClose={this.handleRequestClose.bind(this)}\r\n                             onMailSend={this.onMailSend.bind(this)}/>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Snackbar\r\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            open={showMessage}\r\n            autoHideDuration={3000}\r\n            onClose={this.handleRequestClose}\r\n            ContentProps={{\r\n              'aria-describedby': 'message-id',\r\n            }}\r\n            message={<span id=\"message-id\">{alertMessage}</span>}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({settings}) => {\r\n  const {width} = settings;\r\n  return {width}\r\n};\r\nexport default connect(mapStateToProps)(Mail);\r\n"],"sourceRoot":""}