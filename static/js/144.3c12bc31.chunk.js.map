{"version":3,"sources":["app/routes/map/routes/mapClustering/Components/MarkerClustererEx.js","app/routes/map/routes/mapClustering/index.js","components/ContainerHeader/index.js","components/CardBox/index.js"],"names":["MarkerClustererExampleGoogleMap","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","averageCenter","enableRetinaIcons","gridSize","markers","map","marker","position","latitude","longitude","key","photo_id","MarkerClustererExample","useState","setMarkers","useEffect","fetch","then","res","json","data","photos","containerElement","className","mapElement","MapClustering","match","ContainerHeader","title","IntlMessages","id","CardBox","styleName","MarkerClustererEx","getUrlString","path","sub","index","split","substr","subPath","tag","active","length","href","arr","charAt","toUpperCase","slice","getDisplayString","heading","children","cardStyle","childrenStyle","headerOutside","headingStyle","defaultProps"],"mappings":"yLAMMA,EAAkCC,yBAAc,SAAAC,GAAK,OACzD,kBAAC,YAAD,CACEC,YAAa,EACbC,cAAe,CAACC,IAAK,WAAYC,IAAK,UAEtC,kBAAC,IAAD,CACEC,eAAa,EACbC,mBAAiB,EACjBC,SAAU,IAETP,EAAMQ,QAAQC,KAAI,SAAAC,GAAM,OACvB,kBAAC,SAAD,CACEC,SAAU,CAACR,IAAKO,EAAOE,SAAUR,IAAKM,EAAOG,WAC7CC,IAAKJ,EAAOK,mBA8BPC,EAvBgB,WAAO,IAAD,EAELC,mBAAS,IAFJ,mBAE5BT,EAF4B,KAEnBU,EAFmB,KAYnC,OARAC,qBAAU,WACRC,IAAM,yHACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,EAAWM,EAAKC,aAEnB,IAGD,kBAAC3B,EAAD,CACE4B,iBACE,yBAAKC,UAAU,4CAEjBC,WAAY,yBAAKD,UAAU,0BAC3BnB,QAASA,K,yBCvBAqB,UAdO,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACtB,OACE,yBAAKH,UAAU,+CACb,kBAACI,EAAA,EAAD,CAAiBC,MAAO,kBAACC,EAAA,EAAD,CAAcC,GAAG,8BAA+BJ,MAAOA,IAE/E,yBAAKH,UAAU,OACb,kBAACQ,EAAA,EAAD,CAASC,UAAU,aACjB,kBAACC,EAAD,W,iCCdV,sCAYMC,EAAe,SAACC,EAAMC,EAAKC,GAC/B,OAAc,IAAVA,EACK,KAEA,KAAOF,EAAKG,MAAMF,GAAK,GAAKA,GAuBxBT,IAnBS,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,MAClBO,EADoC,EAAXT,MACZS,KAAKI,OAAO,GACzBC,EAAUL,EAAKG,MAAM,KAC3B,OACE,yBAAKf,UAAU,2EACb,wBAAIA,UAAU,sBAAsBK,GAEpC,kBAAC,IAAD,CAAYL,UAAU,OAAOkB,IAAI,OAC9BD,EAAQnC,KAAI,SAAC+B,EAAKC,GACf,OAAO,kBAAC,IAAD,CAAgBK,OAAQF,EAAQG,SAAWN,EAAQ,EACnCI,IAAKD,EAAQG,SAAWN,EAAQ,EAAI,OAAS,IAAK3B,IAAK2B,EACvDO,KAAMV,EAAaC,EAAMC,EAAKC,IA5BxC,SAACD,GACxB,IAAMS,EAAMT,EAAIE,MAAM,KACtB,OAAIO,EAAIF,OAAS,EACRE,EAAI,GAAGC,OAAO,GAAGC,cAAgBF,EAAI,GAAGG,MAAM,GAAK,IAAMH,EAAI,GAAGC,OAAO,GAAGC,cAAgBF,EAAI,GAAGG,MAAM,GAEvGZ,EAAIU,OAAO,GAAGC,cAAgBX,EAAIY,MAAM,GAuBuBC,CAAiBb,W,iCC/B3F,oBAEML,EAAU,SAAC,GAA2F,IAA1FmB,EAAyF,EAAzFA,QAASC,EAAgF,EAAhFA,SAAUnB,EAAsE,EAAtEA,UAAWoB,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,aAEvF,OACE,yBAAKhC,UAAS,UAAKS,IAChBsB,GACD,yBAAK/B,UAAU,mBACb,wBAAIA,UAAU,iBAAiB2B,GAC9BC,EAASR,OAAS,GAAK,yBAAKpB,UAAU,qBAAqB4B,EAAS,KAIvE,yBAAK5B,UAAS,kBAAa6B,KACvBE,GACDJ,GACC,yBAAK3B,UAAS,yBAAoBgC,IAChC,wBAAIhC,UAAU,gBAAgB2B,GAC7BC,EAASR,OAAS,GAAK,yBAAKpB,UAAU,eAAe4B,EAAS,KAGnE,yBAAK5B,UAAS,uBAAkB8B,IAC7BF,EAASR,OAAS,EAAIQ,EAAS,GAAKA,MAOhCpB,MAEfA,EAAQyB,aAAe,CACrBJ,UAAW,GACXG,aAAc,GACdF,cAAe,GACfrB,UAAW","file":"static/js/144.3c12bc31.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\nimport fetch from \"isomorphic-fetch\";\r\nimport {GoogleMap, Marker, withGoogleMap} from \"react-google-maps\";\r\nimport MarkerClusterer from \"react-google-maps/lib/components/addons/MarkerClusterer\";\r\n\r\nconst MarkerClustererExampleGoogleMap = withGoogleMap(props => (\r\n  <GoogleMap\r\n    defaultZoom={3}\r\n    defaultCenter={{lat: 25.0391667, lng: 121.525}}\r\n  >\r\n    <MarkerClusterer\r\n      averageCenter\r\n      enableRetinaIcons\r\n      gridSize={60}\r\n    >\r\n      {props.markers.map(marker => (\r\n        <Marker\r\n          position={{lat: marker.latitude, lng: marker.longitude}}\r\n          key={marker.photo_id}\r\n        />\r\n      ))}\r\n    </MarkerClusterer>\r\n  </GoogleMap>\r\n));\r\n\r\nconst MarkerClustererExample = () => {\r\n\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(`https://gist.githubusercontent.com/farrrr/dfda7dd7fccfec5474d3/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setMarkers(data.photos);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <MarkerClustererExampleGoogleMap\r\n      containerElement={\r\n        <div className=\"embed-responsive embed-responsive-21by9\"/>\r\n      }\r\n      mapElement={<div className=\"embed-responsive-item\"/>}\r\n      markers={markers}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MarkerClustererExample","import React from 'react';\r\nimport MarkerClustererExample from './Components/MarkerClustererEx';\r\nimport CardBox from 'components/CardBox';\r\nimport ContainerHeader from 'components/ContainerHeader';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\n\r\nconst MapClustering = ({match}) => {\r\n  return (\r\n    <div className=\"animated slideInUpTiny animation-duration-3\">\r\n      <ContainerHeader title={<IntlMessages id=\"sidebar.map.mapClustering\"/>} match={match}/>\r\n\r\n      <div className=\"row\">\r\n        <CardBox styleName=\"col-lg-12\">\r\n          <MarkerClustererExample/>\r\n        </CardBox>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapClustering;\r\n","import React from 'react';\r\nimport {Breadcrumb, BreadcrumbItem} from 'reactstrap';\r\n\r\nconst getDisplayString = (sub) => {\r\n  const arr = sub.split(\"-\");\r\n  if (arr.length > 1) {\r\n    return arr[0].charAt(0).toUpperCase() + arr[0].slice(1) + \" \" + arr[1].charAt(0).toUpperCase() + arr[1].slice(1)\r\n  } else {\r\n    return sub.charAt(0).toUpperCase() + sub.slice(1)\r\n  }\r\n\r\n};\r\nconst getUrlString = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return '#/';\r\n  } else {\r\n    return '#/' + path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst ContainerHeader = ({title, match}) => {\r\n  const path = match.path.substr(1);\r\n  const subPath = path.split('/');\r\n  return (\r\n    <div className=\"page-heading d-sm-flex justify-content-sm-between align-items-sm-center\">\r\n      <h2 className=\"title mb-3 mb-sm-0\">{title}</h2>\r\n\r\n      <Breadcrumb className=\"mb-0\" tag=\"nav\">\r\n        {subPath.map((sub, index) => {\r\n            return <BreadcrumbItem active={subPath.length === index + 1}\r\n                                   tag={subPath.length === index + 1 ? \"span\" : \"a\"} key={index}\r\n                                   href={getUrlString(path, sub, index)}>{getDisplayString(sub)}</BreadcrumbItem>\r\n          }\r\n        )}\r\n      </Breadcrumb>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ContainerHeader;\r\n\r\n","import React from 'react';\r\n\r\nconst CardBox = ({heading, children, styleName, cardStyle, childrenStyle, headerOutside, headingStyle}) => {\r\n\r\n  return (\r\n    <div className={`${styleName}`}>\r\n      {headerOutside &&\r\n      <div className=\"jr-entry-header\">\r\n        <h3 className=\"entry-heading\">{heading}</h3>\r\n        {children.length > 1 && <div className=\"entry-description\">{children[0]}</div>}\r\n      </div>\r\n      }\r\n\r\n      <div className={`jr-card ${cardStyle}`}>\r\n        {!headerOutside &&\r\n        (heading &&\r\n          <div className={`jr-card-header ${headingStyle}`}>\r\n            <h3 className=\"card-heading\">{heading}</h3>\r\n            {children.length > 1 && <div className=\"sub-heading\">{children[0]}</div>}\r\n          </div>\r\n        )}\r\n        <div className={`jr-card-body ${childrenStyle}`}>\r\n          {children.length > 1 ? children[1] : children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default CardBox;\r\n\r\nCardBox.defaultProps = {\r\n  cardStyle: '',\r\n  headingStyle: '',\r\n  childrenStyle: '',\r\n  styleName: 'col-lg-6 col-sm-12'\r\n};"],"sourceRoot":""}