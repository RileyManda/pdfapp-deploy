{"version":3,"sources":["app/routes/contact/basic/index.js"],"names":["contactId","filterOptions","id","name","icon","Contact","ContactSideBar","user","className","style","height","props","width","variant","color","aria-label","onClick","onAddContact","map","option","key","state","selectedSectionId","onFilterOptionSelect","bind","addFavourite","data","setState","alertMessage","starred","showMessage","contactList","contact","allContact","onContactSelect","selected","selectedContacts","addContactState","onContactClose","filterOption","filter","frequently","onSaveContact","isNew","push","onDeleteContact","onDeleteSelectedContact","contacts","filterContact","userName","toLowerCase","indexOf","handleRequestClose","getAllContact","length","getUnselectedAllContact","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","this","evt","target","value","open","onClose","onToggleDrawer","placeholder","notification","apps","onChange","updateContactUser","indeterminate","checked","onAllContactSelect","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","Component","connect","settings"],"mappings":"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","file":"static/js/160.7de048d9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {connect} from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport contactList from '../data/contactList';\r\nimport ContactList from 'components/contact/ContactList';\r\nimport AppModuleHeader from 'components/AppModuleHeader/index';\r\nimport AddContact from 'components/contact/AddContact';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport CustomScrollbars from 'util/CustomScrollbars';\r\n\r\nlet contactId = 723812738;\r\n\r\nconst filterOptions = [\r\n  {\r\n    id: 1,\r\n    name: 'All contacts',\r\n    icon: 'zmdi-menu'\r\n  }, {\r\n    id: 2,\r\n    name: 'Frequently contacted',\r\n    icon: 'zmdi-time-restore'\r\n\r\n  }, {\r\n\r\n    id: 3,\r\n    name: 'Starred contacts',\r\n    icon: 'zmdi-star'\r\n  }\r\n];\r\n\r\nclass Contact extends Component {\r\n\r\n  ContactSideBar = (user) => {\r\n    return <div className=\"module-side\">\r\n      <div className=\"module-side-header\">\r\n        <div className=\"module-logo\">\r\n          <i className=\"zmdi zmdi-account-box mr-4\"/>\r\n          <span><IntlMessages id=\"chat.contacts\"/></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"module-side-content\">\r\n        <CustomScrollbars className=\"module-side-scroll scrollbar\"\r\n                          style={{height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'}}>\r\n          <div className=\"module-add-task\">\r\n            <Button className=\"jr-btn btn-block\" variant=\"contained\" color=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"zmdi zmdi-account-add zmdi-hc-fw\"/>\r\n              <span>Add New Contact</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"module-side-nav\">\r\n            <ul className=\"module-nav\">\r\n              {filterOptions.map(option => <li key={option.id} className=\"nav-item\">\r\n                  <span\r\n                    className={`jr-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\r\n                    this.onFilterOptionSelect.bind(this, option)\r\n                  }>\r\n                    <i className={`zmdi ${option.icon}`}/>\r\n                    <span>{option.name}</span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n\r\n            </ul>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n\r\n  addFavourite = (data) => {\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\r\n      showMessage: true,\r\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact),\r\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact)\r\n    })\r\n  };\r\n  onContactSelect = (data) => {\r\n    data.selected = !data.selected;\r\n    let selectedContacts = 0;\r\n    const contactList = this.state.contactList.map(contact => {\r\n        if (contact.selected) {\r\n          selectedContacts++;\r\n        }\r\n        if (contact.id === data.id) {\r\n          if (contact.selected) {\r\n            selectedContacts++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return contact;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedContacts: selectedContacts,\r\n      contactList: contactList\r\n    });\r\n\r\n  };\r\n\r\n\r\n  onAddContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onFilterOptionSelect = (option) => {\r\n    switch (option.name) {\r\n      case 'All contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n        break;\r\n      }\r\n      case 'Frequently contacted': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\r\n        });\r\n        break;\r\n      }\r\n      case 'Starred contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.starred)\r\n        });\r\n        break;\r\n      }\r\n      default: {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n      }\r\n    }\r\n\r\n  };\r\n  onSaveContact = (data) => {\r\n    let isNew = true;\r\n    const contactList = this.state.allContact.map((contact) => {\r\n      if (contact.id === data.id) {\r\n        isNew = false;\r\n        return data\r\n      } else {\r\n        return contact\r\n      }\r\n    });\r\n    if (isNew) {\r\n      contactList.push(data);\r\n    }\r\n    this.setState({\r\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\r\n      showMessage: true,\r\n      contactList: contactList,\r\n      allContact: contactList\r\n    });\r\n    // this.onFilterOptionSelect(this.state.filterOption);\r\n  };\r\n  onDeleteContact = (data) => {\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\r\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\r\n    })\r\n  };\r\n  onDeleteSelectedContact = () => {\r\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: contacts,\r\n      contactList: contacts,\r\n      selectedContacts: 0\r\n    })\r\n  };\r\n  filterContact = (userName) => {\r\n    const {filterOption} = this.state;\r\n    if (userName === '') {\r\n      this.setState({contactList: this.state.allContact});\r\n    } else {\r\n      const filterContact = this.state.allContact.filter((contact) =>\r\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\r\n      if (filterOption === 'All contacts') {\r\n        this.setState({contactList: filterContact});\r\n      } else if (filterOption === 'Frequently contacted') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\r\n\r\n      } else if (filterOption === 'Starred contacts') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\r\n      }\r\n    }\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: true\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: contactList.length,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n  getUnselectedAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: false\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: 0,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noContentFoundMessage: 'No contact found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      selectedSectionId: 1,\r\n      drawerState: false,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert.johnson@example.com',\r\n        avatar: \"https://via.placeholder.com/150x150\"\r\n      },\r\n      searchUser: '',\r\n      filterOption: 'All contacts',\r\n      allContact: contactList,\r\n      contactList: contactList,\r\n      selectedContact: null,\r\n      selectedContacts: 0,\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  onAllContactSelect() {\r\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\r\n    if (selectAll) {\r\n      this.getAllContact();\r\n    } else {\r\n      this.getUnselectedAllContact();\r\n    }\r\n  }\r\n\r\n  updateContactUser(evt) {\r\n    this.setState({\r\n      searchUser: evt.target.value,\r\n    });\r\n    this.filterContact(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {user, contactList, addContactState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <div className=\"app-module animated slideInUpTiny animation-duration-3\">\r\n\r\n          <div className=\"d-block d-xl-none\">\r\n            <Drawer\r\n              open={this.state.drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ContactSideBar(user)}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"app-module-sidenav d-none d-xl-flex\">\r\n            {this.ContactSideBar(user)}\r\n          </div>\r\n\r\n          <div className=\"module-box\">\r\n            <div className=\"module-box-header\">\r\n              <IconButton className=\"drawer-btn d-block d-xl-none\" aria-label=\"Menu\"\r\n                          onClick={this.onToggleDrawer.bind(this)}>\r\n                <i className=\"zmdi zmdi-menu\"/>\r\n              </IconButton>\r\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\r\n                               user={this.state.user}\r\n                               onChange={this.updateContactUser.bind(this)}\r\n                               value={this.state.searchUser}/>\r\n            </div>\r\n            <div className=\"module-box-content\">\r\n\r\n              <div className=\"module-box-topbar\">\r\n                <Checkbox color=\"primary\"\r\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\r\n                          checked={selectedContacts > 0}\r\n                          onChange={this.onAllContactSelect.bind(this)}\r\n                          value=\"SelectMail\"/>\r\n\r\n\r\n                {selectedContacts > 0 &&\r\n                <IconButton className=\"icon-btn\"\r\n                            onClick={this.onDeleteSelectedContact.bind(this)}>\r\n                  <i className=\"zmdi zmdi-delete\"/>\r\n                </IconButton>}\r\n\r\n              </div>\r\n              <CustomScrollbars className=\"module-list-scroll scrollbar\"\r\n                                style={{height: this.props.width >= 1200 ? 'calc(100vh - 261px)' : 'calc(100vh - 240px)'}}>\r\n                {contactList.length === 0 ?\r\n                  <div className=\"h-100 d-flex align-items-center justify-content-center\">\r\n                    {noContentFoundMessage}\r\n                  </div>\r\n                  : <ContactList contactList={contactList}\r\n                                 addFavourite={this.addFavourite.bind(this)}\r\n                                 onContactSelect={this.onContactSelect.bind(this)}\r\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\r\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\r\n                }\r\n\r\n\r\n              </CustomScrollbars>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <AddContact open={addContactState} contact={{\r\n          'id': contactId++,\r\n          'name': '',\r\n          'thumb': '',\r\n          'email': '',\r\n          'phone': '',\r\n          'designation': '',\r\n          'selected': false,\r\n          'starred': false,\r\n          'frequently': false,\r\n        }} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n        <Snackbar\r\n          anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n          open={showMessage}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleRequestClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{alertMessage}</span>}\r\n        /></div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({settings}) => {\r\n  const {width} = settings;\r\n  return {width}\r\n};\r\nexport default connect(mapStateToProps)(Contact);\r\n"],"sourceRoot":""}