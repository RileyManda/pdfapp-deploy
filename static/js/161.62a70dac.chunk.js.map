{"version":3,"sources":["app/routes/contact/redux/index.js"],"names":["contactId","filterOptions","id","name","icon","ContactWithRedux","ContactSideBar","user","className","style","height","props","width","variant","color","aria-label","onClick","onAddContact","map","option","key","selectedSectionId","onFilterOptionSelect","bind","addFavourite","data","onContactSelect","onContactClose","onSaveContact","onDeleteContact","onDeleteSelectedContact","filterContact","userName","filterOption","handleRequestClose","onAllContactSelect","selectedContacts","contactList","length","getAllContact","getUnselectedAllContact","onToggleDrawer","this","fetchContacts","evt","updateContactUser","target","value","addContactState","alertMessage","showMessage","drawerState","noContentFoundMessage","loader","open","onClose","placeholder","notification","apps","onChange","searchUser","indeterminate","checked","contact","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","Component","connect","contacts","settings","allContact","selectedContact"],"mappings":"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","file":"static/js/161.62a70dac.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport {connect} from 'react-redux'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport ContactList from 'components/contact/ContactList';\r\nimport AppModuleHeader from 'components/AppModuleHeader/index';\r\nimport AddContact from 'components/contact/AddContact';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {\r\n  addFavourite,\r\n  fetchContacts,\r\n  filterContact,\r\n  getAllContact,\r\n  getUnselectedAllContact,\r\n  handleRequestClose,\r\n  onAddContact,\r\n  onAllContactSelect,\r\n  onContactClose,\r\n  onContactSelect,\r\n  onDeleteContact,\r\n  onDeleteSelectedContact,\r\n  onFilterOptionSelect,\r\n  onSaveContact,\r\n  onToggleDrawer,\r\n  updateContactUser\r\n} from 'actions/Contact';\r\n\r\nimport CustomScrollbars from 'util/CustomScrollbars';\r\n\r\nlet contactId = 723812738;\r\n\r\nconst filterOptions = [\r\n  {\r\n    id: 1,\r\n    name: 'All contacts',\r\n    icon: 'zmdi-menu'\r\n  }, {\r\n    id: 2,\r\n    name: 'Frequently contacted',\r\n    icon: 'zmdi-time-restore'\r\n\r\n  }, {\r\n\r\n    id: 3,\r\n    name: 'Starred contacts',\r\n    icon: 'zmdi-star'\r\n  }\r\n];\r\n\r\nclass ContactWithRedux extends Component {\r\n\r\n  ContactSideBar = (user) => {\r\n    return <div className=\"module-side\">\r\n      <div className=\"module-side-header\">\r\n        <div className=\"module-logo\">\r\n          <i className=\"zmdi zmdi-account-box mr-4\"/>\r\n          <span><IntlMessages id=\"chat.contacts\"/></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"module-side-content\">\r\n        <CustomScrollbars className=\"module-side-scroll scrollbar\"\r\n                          style={{height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'}}>\r\n          <div className=\"module-add-task\">\r\n            <Button className=\"jr-btn btn-block\" variant=\"contained\" color=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"zmdi zmdi-account-add zmdi-hc-fw\"/>\r\n              <span>Add New Contact</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"module-side-nav\">\r\n            <ul className=\"module-nav\">\r\n              {filterOptions.map(option => <li key={option.id} className=\"nav-item\">\r\n                  <span\r\n                    className={`jr-link ${option.id === this.props.selectedSectionId ? 'active' : ''}`} onClick={\r\n                    this.onFilterOptionSelect.bind(this, option)\r\n                  }>\r\n                    <i className={`zmdi ${option.icon}`}/>\r\n                    <span>{option.name}</span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n\r\n            </ul>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n\r\n  addFavourite = (data) => {\r\n    this.props.addFavourite(data);\r\n  };\r\n  onContactSelect = (data) => {\r\n    this.props.onContactSelect(data);\r\n  };\r\n\r\n  onAddContact = () => {\r\n    this.props.onAddContact();\r\n  };\r\n  onContactClose = () => {\r\n    this.props.onContactClose();\r\n  };\r\n  onFilterOptionSelect = (option) => {\r\n    this.props.onFilterOptionSelect(option);\r\n  };\r\n  onSaveContact = (data) => {\r\n    this.props.onSaveContact(data);\r\n  };\r\n  onDeleteContact = (data) => {\r\n    this.props.onDeleteContact(data);\r\n  };\r\n  onDeleteSelectedContact = () => {\r\n    this.props.onDeleteSelectedContact();\r\n  };\r\n  filterContact = (userName) => {\r\n    if (userName === '') {\r\n      this.onFilterOptionSelect(this.props.filterOption);\r\n    } else {\r\n      this.props.filterContact(userName);\r\n    }\r\n  };\r\n  handleRequestClose = () => {\r\n    this.props.handleRequestClose();\r\n  };\r\n  onAllContactSelect = () => {\r\n    const selectAll = this.props.selectedContacts < this.props.contactList.length;\r\n    if (selectAll) {\r\n      this.props.getAllContact();\r\n    } else {\r\n      this.props.getUnselectedAllContact();\r\n    }\r\n  };\r\n  onToggleDrawer = () => {\r\n    this.props.onToggleDrawer();\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n\r\n  updateContactUser(evt) {\r\n    this.props.updateContactUser(evt.target.value);\r\n    this.props.filterContact(evt.target.value)\r\n  }\r\n\r\n  render() {\r\n    const {user, contactList, addContactState, selectedContacts, alertMessage, showMessage, drawerState, noContentFoundMessage, loader} = this.props;\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <div className=\"app-module animated slideInUpTiny animation-duration-3\">\r\n\r\n          <div className=\"d-block d-xl-none\">\r\n            <Drawer\r\n              open={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ContactSideBar(user)}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"app-module-sidenav d-none d-xl-flex\">\r\n            {this.ContactSideBar(user)}\r\n          </div>\r\n\r\n          <div className=\"module-box\">\r\n            <div className=\"module-box-header\">\r\n              <IconButton className=\"drawer-btn d-block d-xl-none\" aria-label=\"Menu\"\r\n                          onClick={this.onToggleDrawer.bind(this)}>\r\n                <i className=\"zmdi zmdi-menu\"/>\r\n              </IconButton>\r\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\r\n                               user={this.props.user}\r\n                               onChange={this.updateContactUser.bind(this)}\r\n                               value={this.props.searchUser}/>\r\n            </div>\r\n            <div className=\"module-box-content\">\r\n\r\n              <div className=\"module-box-topbar\">\r\n                <Checkbox color=\"primary\"\r\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\r\n                          checked={selectedContacts > 0}\r\n                          onChange={this.onAllContactSelect.bind(this)}\r\n                          value=\"SelectMail\"/>\r\n\r\n\r\n                {selectedContacts > 0 &&\r\n                <IconButton className=\"icon-btn\"\r\n                            onClick={this.onDeleteSelectedContact.bind(this)}>\r\n                  <i className=\"zmdi zmdi-delete\"/>\r\n                </IconButton>}\r\n\r\n              </div>\r\n              <CustomScrollbars className=\"module-list-scroll scrollbar\"\r\n                                style={{height: this.props.width >= 1200 ? 'calc(100vh - 261px)' : 'calc(100vh - 240px)'}}>\r\n                {loader ?\r\n                  <div className=\"loader-view-block h-100\">\r\n                    <div className=\"loader-view\">\r\n                      <CircularProgress/>\r\n                    </div>\r\n                  </div>\r\n                  :\r\n                  contactList.length === 0 ?\r\n                    <div className=\"h-100 d-flex align-items-center justify-content-center\">\r\n                      {noContentFoundMessage}\r\n                    </div>\r\n                    : <ContactList contactList={contactList}\r\n                                   addFavourite={this.addFavourite.bind(this)}\r\n                                   onContactSelect={this.onContactSelect.bind(this)}\r\n                                   onDeleteContact={this.onDeleteContact.bind(this)}\r\n                                   onSaveContact={this.onSaveContact.bind(this)}/>\r\n                }\r\n              </CustomScrollbars>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <AddContact open={addContactState} contact={{\r\n          'id': contactId++,\r\n          'name': '',\r\n          'thumb': '',\r\n          'email': '',\r\n          'phone': '',\r\n          'designation': '',\r\n          'selected': false,\r\n          'starred': false,\r\n          'frequently': false,\r\n        }} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n        <Snackbar\r\n          anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n          open={showMessage}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleRequestClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{alertMessage}</span>}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({contacts, settings}) => {\r\n  const {width} = settings;\r\n  const {\r\n    loader,\r\n    alertMessage,\r\n    showMessage,\r\n    noContentFoundMessage,\r\n    selectedSectionId,\r\n    drawerState,\r\n    user,\r\n    searchUser,\r\n    filterOption,\r\n    allContact,\r\n    contactList,\r\n    selectedContact,\r\n    selectedContacts,\r\n    addContactState\r\n  } = contacts;\r\n  return {\r\n    width,\r\n    loader,\r\n    alertMessage,\r\n    showMessage,\r\n    noContentFoundMessage,\r\n    selectedSectionId,\r\n    drawerState,\r\n    user,\r\n    searchUser,\r\n    filterOption,\r\n    allContact,\r\n    contactList,\r\n    selectedContact,\r\n    selectedContacts,\r\n    addContactState\r\n  }\r\n};\r\nexport default connect(mapStateToProps, {\r\n  fetchContacts,\r\n  addFavourite,\r\n  onContactSelect,\r\n  onAddContact,\r\n  onContactClose,\r\n  onFilterOptionSelect,\r\n  onSaveContact,\r\n  onDeleteContact,\r\n  onDeleteSelectedContact,\r\n  filterContact,\r\n  getAllContact,\r\n  getUnselectedAllContact,\r\n  onAllContactSelect,\r\n  updateContactUser,\r\n  onToggleDrawer,\r\n  handleRequestClose\r\n})(ContactWithRedux);"],"sourceRoot":""}